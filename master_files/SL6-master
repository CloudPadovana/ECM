#!/bin/bash
HOSTIP=$(hostname -I | awk '{print $1}')
##################
# ELASTIQ CONFIG #
##################
EC2_ACCESS_KEY=access-key
EC2_SECRET_KEY=secret-key
EC2_URL=ec2-url
MAX_VMS=max-vms
MIN_VMS=min-vms
FLAVOR=instance-flavor
IMAGE_ID=image-id
JOBS_PER_VM=jobs-per-vm
IDLE_TIME=idle-time
KEY_NAME=key-name

###########
# CA CERT #
###########
cat<< EOF >/tmp/cacerts.txt

INFN CA 2015
================
-----BEGIN CERTIFICATE-----
MIIFwjCCA6qgAwIBAgIJALMmAsZ9SSYnMA0GCSqGSIb3DQEBCwUAMEMxCzAJBgNV
BAYTAklUMQ0wCwYDVQQKEwRJTkZOMSUwIwYDVQQDExxJTkZOIENlcnRpZmljYXRp
b24gQXV0aG9yaXR5MB4XDTE1MTAwNjEwMjIwNVoXDTMwMTAwNjEwMjIwNVowQzEL
MAkGA1UEBhMCSVQxDTALBgNVBAoTBElORk4xJTAjBgNVBAMTHElORk4gQ2VydGlm
aWNhdGlvbiBBdXRob3JpdHkwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoIC
AQDiXdR7kfK7dqc5tQCDZ3YKD89FizGFho2pBxzddUmjVEbEBeOmG//zK4FmBku8
3STid3YmYOcMMf8C0nAVGktdjw2hqYVjP+pw7mnmWFog/mNMkw/Q7/avLeoiY8I+
pJtWKPCbhTZInK59k/KcLs7brauV4+fBBp2vscOpM8j4Y6TH7MAJLsrYddzgxCoE
IvjZ5cRXcPHDN7n2WhojN70XtlQfhYNjUlSGIoqdVXOEKVBEG74Olg888AGeoFPx
Sc5FaLlM0GeKLgRYYtDUu8tGMdhMdCTgRT515P36v41P7K4wZGMexRb4l7BMHVNf
ljlVqjr8L2f2g4Dy21HZDDlFfcoq6VzltcDpF3s8o5/r3eQiGVWTSS1JXJpXLJTc
dvj4q6hPQEsdkyH2aqcvS06N2XWWG27np0JzVsipAP9WRYyLAJO+ETtwOOvqtakF
7JrP0Nb6jySRPy/QmfY+jKmwf6hJ3WHq/8/6Gr1VRTq0si+ZC46nY89pYf++QLKk
cge7uKvddxepoLV93Hx/GMGc96jAtD/R4XcRfRjO/1+9rwBOXZNLeNVoD5eCj+Ad
NDF1ML/Ya8Gv3AOVJNcyAcM145VbFphZwkSTh3M9DRBKTqyQIBVVAF75cpkU13qa
dQBQQOhiFAZCSSxLG6Iq0lW5KsfQqHd13XaSorPIV/p80wIDAQABo4G4MIG1MA8G
A1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgEGMB0GA1UdDgQWBBRDjE3+7JbK
6e8KpH3BnQLln72WgDBzBgNVHSMEbDBqgBRDjE3+7JbK6e8KpH3BnQLln72WgKFH
pEUwQzELMAkGA1UEBhMCSVQxDTALBgNVBAoTBElORk4xJTAjBgNVBAMTHElORk4g
Q2VydGlmaWNhdGlvbiBBdXRob3JpdHmCCQCzJgLGfUkmJzANBgkqhkiG9w0BAQsF
AAOCAgEAz0nec0stGy30+hNRN52Ni5YYCMFFoX4aD7LdrWt+MT86i4UFzvPRwvOp
bPcPC63sjQbP+jePgFXsmEaPkDKuf0x344lNyAgIU+JFWinc4gv4nN5oHfuSXG6J
UTfYLHaVuPahKeHUUpBOytyOMDRKG+FlGOxQvhnohhjUwBffbu1FIu993+d0w2GC
9Z4zT+GUKSlviOUYbzctDuG0D8FVWJK7L5SsjFSPSfCJlbWKGmdpDNV2vNzkaHsA
dQ13WqxE8b0JTHdpS3vsrvfSehY4IG4Fj2HqsDE/dflH3gcJb5l4ls8kcA53YRG2
NDTjvjdq3tv5AlYJzHKcxq1vhUmVx1vkg1aYNgcV8m8wkPhsnQuTdiQm8EA3ItOO
RNYawfuVeS021RXwRL290HFIlfwm6imRmlKepGvJBWbrVdrrLCq4s5UPjcxnQnZE
tapQPUtfV1m9V/T69h5jrfVy1nMM4WWA6MVPljlol1k72jArm+oXvoEvDiNfj2qj
gfvV03R4GXxP+0EWFXac4tiFFu6YC4Hu7ou38tnnW/nx+xurvnsxIW7ZDaLGKCd+
VJmb+qhU3NJvDPGjDuksXp0idfhbK6R2dFz7UFS1DYdRit7jeZpou5D4LaIL0CQ/
KjUrC7M6W+Zhicc0ihbwb03ppLv9/vbj06MY4+HMivKiK1oxd+Q=
-----END CERTIFICATE-----

EOF
#################
# CONDOR CONFIG #
#################
cat << EOF >/tmp/Cluster 
###############
# SL6 Cluster #
###############
SEC_DAEMON_AUTHENTICATION = required
SEC_DAEMON_INTEGRITY = required
SEC_DAEMON_AUTHENTICATION_METHODS = password
SEC_CLIENT_AUTHENTICATION_METHODS = password,fs,gsi,kerberos
SEC_PASSWORD_FILE = /etc/condor/condor_credential
SEC_ENABLE_MATCH_PASSWORD_AUTHENTICATION = True

ALLOW_DAEMON = condor_pool@*, submit-side@matchsession
## Short description: Change this to an appropriate name (30 chr. limit)
COLLECTOR_NAME = CernVM cluster at \$(CONDOR_HOST)
##  Sets how often the condor_negotiator starts a negotiation cycle.
##  It is defined in seconds and defaults to 60 (1 minute).
NEGOTIATOR_INTERVAL = 20
##  When is this machine willing to start a job?
START = TRUE
##  When to suspend a job?
SUSPEND = FALSE
##  When to nicely stop a job?
##  (as opposed to killing it instantaneously)
PREEMPT = FALSE
##  When to instantaneously kill a preempting job
##  (e.g. if a job is in the pre-empting stage for too long)
KILL = FALSE
##  Disable UID_DOMAIN check when submit a job
TRUST_UID_DOMAIN = TRUE

##  Use TCP instead of UDP, and cache TCP sockets
##  (more reliable on some cloud networks)
UPDATE_COLLECTOR_WITH_TCP = True
COLLECTOR_SOCKET_CACHE_SIZE = 1000

## Avoid crashes of the collector
CONDOR_DEVELOPERS_COLLECTOR = NONE
EOF
###############
# TEST SCRIPT #
###############
cat <<EOF> /tmp/test.sh
#!/bin/bash
HOST=\$(hostname -I | awk '{print $1}')
DIR=\$(pwd)
sleep 5
echo "I'm sleeping in \$HOST"
echo ":-("
echo "More precisely in this directory \$DIR" 
echo ":-/"
sleep 20
echo "Now I'm running! So fun! :-)"
EOF
############################
# MASTER NODE INSTALLATION #
############################
##############
# SCIENTIFIC #
##############
cd /etc/yum.repos.d
wget http://10.64.34.11/repo/htcondor/repo.d/htcondor-stable-rhel6.repo
#
yum install -y yum-priorities
cat << EOF >>/etc/yum.repos.d/htcondor-stable-rhel6.repo
check_obsoletes=1
priority=1
EOF
yum clean all
#
yum install -y condor-all-8.4.9
#
CUID=$(id condor | awk '{print $1}'| cut -d'=' -f2|cut -d'(' -f1)
CGID=$(id condor | awk '{print $2}'| cut -d'=' -f2|cut -d'(' -f1)
#
cat << EOF >/etc/condor/condor_config.local

DAEMON_LIST = COLLECTOR, MASTER, NEGOTIATOR, SCHEDD
CONDOR_HOST = $HOSTIP
CONDOR_ADMIN = root@$HOSTIP

# Preserve UID of submitting user
UID_DOMAIN = *
TRUST_UID_DOMAIN = True
SOFT_UID_DOMAIN = True

CONDOR_IDS = $CUID.$CGID
QUEUE_SUPER_USERS = root, condor
HIGHPORT = 42000
LOWPORT = 41000
EOF
#
cat /tmp/Cluster > /etc/condor/config.d/SL6
#
/usr/sbin/condor_store_cred -p 12345 add -f /etc/condor/condor_credential
#
service condor start
#
yum localinstall -y https://github.com/dberzano/elastiq/releases/download/v0.9.10/python-elastiq-0.9.10-1.py26.noarch.rpm
#
cat /tmp/cacerts.txt >> /usr/lib/python2.6/site-packages/boto/cacerts/cacerts.txt
#
cat<< EOF >/etc/elastiq.conf 
[elastiq]
check_queue_every_s = 45
idle_for_time_s = $IDLE_TIME
waiting_jobs_time_s = 45
n_jobs_per_vm = $JOBS_PER_VM
batch_plugin = htcondor
estimated_vm_deploy_time_s = 1200
check_vms_every_s = 45

[ec2]
flavour = $FLAVOR
api_url = $EC2_URL
user_data_b64 = IyEvYmluL2Jhc2gNCkhPU1RJUD0kKGhvc3RuYW1lIC1JIHwgYXdrICd7cHJpbnQgJDF9JykNCiMNCndnZXQgaHR0cDovL3Jlc2VhcmNoLmNzLndpc2MuZWR1L2h0Y29uZG9yL3l1bS9SUE0tR1BHLUtFWS1IVENvbmRvcg0KcnBtIC0taW1wb3J0IFJQTS1HUEctS0VZLUhUQ29uZG9yDQpjZCAvZXRjL3l1bS5yZXBvcy5kDQp3Z2V0IGh0dHA6Ly8xMC42NC4zNC4xMS9yZXBvL2h0Y29uZG9yL3JlcG8uZC9odGNvbmRvci1zdGFibGUtcmhlbDYucmVwbw0KIw0KeXVtIGluc3RhbGwgLXkgeXVtLXByaW9yaXRpZXMNCmNhdCA8PCBFT0YgPj4vZXRjL3l1bS5yZXBvcy5kL2h0Y29uZG9yLXN0YWJsZS1yaGVsNi5yZXBvDQpjaGVja19vYnNvbGV0ZXM9MQ0KcHJpb3JpdHk9MQ0KRU9GDQp5dW0gY2xlYW4gYWxsDQojDQp5dW0gaW5zdGFsbCAteSBjb25kb3ItYWxsLTguNC45DQojDQpDVUlEPSQoaWQgY29uZG9yIHwgYXdrICd7cHJpbnQgJDF9J3wgY3V0IC1kJz0nIC1mMnxjdXQgLWQnKCcgLWYxKQ0KQ0dJRD0kKGlkIGNvbmRvciB8IGF3ayAne3ByaW50ICQyfSd8IGN1dCAtZCc9JyAtZjJ8Y3V0IC1kJygnIC1mMSkNCiMNCmNhdCA8PCBFT0YgPi9ldGMvY29uZG9yL2NvbmRvcl9jb25maWcubG9jYWwNCkRBRU1PTl9MSVNUID0gTUFTVEVSLCBTVEFSVEQNCkNPTkRPUl9IT1NUID0gJWlwdjQlDQpDT05ET1JfQURNSU4gPSByb290QCVpcHY0JQ0KDQojIFByZXNlcnZlIFVJRCBvZiBzdWJtaXR0aW5nIHVzZXINClVJRF9ET01BSU4gPSAqDQpUUlVTVF9VSURfRE9NQUlOID0gVHJ1ZQ0KU09GVF9VSURfRE9NQUlOID0gVHJ1ZQ0KDQpDT05ET1JfSURTID0gJENVSUQuJENHSUQNClFVRVVFX1NVUEVSX1VTRVJTID0gcm9vdCwgY29uZG9yDQpISUdIUE9SVCA9IDQyMDAwDQpMT1dQT1JUID0gNDEwMDANCk5FVFdPUktfSU5URVJGQUNFID0gJEhPU1RJUA0KTk9fRE5TID0gVHJ1ZQ0KREVGQVVMVF9ET01BSU5fTkFNRSA9IElORk4tUEQNCkVPRg0KIw0KY2F0IDw8RU9GPiAvZXRjL2NvbmRvci9jb25maWcuZC9TTDYNCiMjIyMjIyMjIyMjIyMjDQojIFNMIENsdXN0ZXIgIw0KIyMjIyMjIyMjIyMjIyMNClNFQ19EQUVNT05fQVVUSEVOVElDQVRJT04gPSByZXF1aXJlZA0KU0VDX0RBRU1PTl9JTlRFR1JJVFkgPSByZXF1aXJlZA0KU0VDX0RBRU1PTl9BVVRIRU5USUNBVElPTl9NRVRIT0RTID0gcGFzc3dvcmQNClNFQ19DTElFTlRfQVVUSEVOVElDQVRJT05fTUVUSE9EUyA9IHBhc3N3b3JkLGZzLGdzaSxrZXJiZXJvcw0KU0VDX1BBU1NXT1JEX0ZJTEUgPSAvZXRjL2NvbmRvci9jb25kb3JfY3JlZGVudGlhbA0KU0VDX0VOQUJMRV9NQVRDSF9QQVNTV09SRF9BVVRIRU5USUNBVElPTiA9IFRydWUNCg0KQUxMT1dfREFFTU9OID0gY29uZG9yX3Bvb2xAKiwgc3VibWl0LXNpZGVAbWF0Y2hzZXNzaW9uDQojIyBTaG9ydCBkZXNjcmlwdGlvbjogQ2hhbmdlIHRoaXMgdG8gYW4gYXBwcm9wcmlhdGUgbmFtZSAoMzAgY2hyLiBsaW1pdCkNCkNPTExFQ1RPUl9OQU1FID0gQ2VyblZNIGNsdXN0ZXIgYXQgXCQoQ09ORE9SX0hPU1QpDQojIyAgU2V0cyBob3cgb2Z0ZW4gdGhlIGNvbmRvcl9uZWdvdGlhdG9yIHN0YXJ0cyBhIG5lZ290aWF0aW9uIGN5Y2xlLg0KIyMgIEl0IGlzIGRlZmluZWQgaW4gc2Vjb25kcyBhbmQgZGVmYXVsdHMgdG8gNjAgKDEgbWludXRlKS4NCk5FR09USUFUT1JfSU5URVJWQUwgPSAyMA0KIyMgIFdoZW4gaXMgdGhpcyBtYWNoaW5lIHdpbGxpbmcgdG8gc3RhcnQgYSBqb2I/DQpTVEFSVCA9IFRSVUUNCiMjICBXaGVuIHRvIHN1c3BlbmQgYSBqb2I/DQpTVVNQRU5EID0gRkFMU0UNCiMjICBXaGVuIHRvIG5pY2VseSBzdG9wIGEgam9iPw0KIyMgIChhcyBvcHBvc2VkIHRvIGtpbGxpbmcgaXQgaW5zdGFudGFuZW91c2x5KQ0KUFJFRU1QVCA9IEZBTFNFDQojIyAgV2hlbiB0byBpbnN0YW50YW5lb3VzbHkga2lsbCBhIHByZWVtcHRpbmcgam9iDQojIyAgKGUuZy4gaWYgYSBqb2IgaXMgaW4gdGhlIHByZS1lbXB0aW5nIHN0YWdlIGZvciB0b28gbG9uZykNCktJTEwgPSBGQUxTRQ0KIyMgIERpc2FibGUgVUlEX0RPTUFJTiBjaGVjayB3aGVuIHN1Ym1pdCBhIGpvYg0KVFJVU1RfVUlEX0RPTUFJTiA9IFRSVUUNCg0KIyMgIFVzZSBUQ1AgaW5zdGVhZCBvZiBVRFAsIGFuZCBjYWNoZSBUQ1Agc29ja2V0cw0KIyMgIChtb3JlIHJlbGlhYmxlIG9uIHNvbWUgY2xvdWQgbmV0d29ya3MpDQpVUERBVEVfQ09MTEVDVE9SX1dJVEhfVENQID0gVHJ1ZQ0KQ09MTEVDVE9SX1NPQ0tFVF9DQUNIRV9TSVpFID0gMTAwMA0KDQojIyBBdm9pZCBjcmFzaGVzIG9mIHRoZSBjb2xsZWN0b3INCkNPTkRPUl9ERVZFTE9QRVJTX0NPTExFQ1RPUiA9IE5PTkUNCkVPRg0KIw0KL3Vzci9zYmluL2NvbmRvcl9zdG9yZV9jcmVkIC1wIDEyMzQ1IGFkZCAtZiAvZXRjL2NvbmRvci9jb25kb3JfY3JlZGVudGlhbA0KIw0Kc2VydmljZSBjb25kb3Igc3RhcnQNCg==
image_id = $IMAGE_ID
aws_secret_access_key = $EC2_SECRET_KEY
aws_access_key_id = $EC2_ACCESS_KEY
key_name = $KEY_NAME

[quota]
max_vms = $MAX_VMS
min_vms = $MIN_VMS

EOF
#
service elastiq start
#
adduser scientific
mkdir /home/scientific/jobs/
mkdir /home/scientific/jobs/log/
mkdir /home/scientific/jobs/output/
mkdir /home/scientific/jobs/error/
cat<< EOF > /home/scientific/jobs/test.jdl
Universe = vanilla
Executable = /home/scientific/jobs/test.sh
Log = /home/scientific/jobs/log/test.log.\$(Cluster).\$(Process)
Output = /home/scientific/jobs/output/test.out.\$(Cluster).\$(Process)
Error = /home/scientific/jobs/error/test.err.\$(Cluster).\$(Process)
Queue 10
EOF
cat /tmp/test.sh > /home/scientific/jobs/test.sh
chown scientific:root -R /home/scientific/jobs/
chmod u+x -R /home/scientific/jobs/
#
cat<<EOF>/root/README.txt
Root user can't submit condor jobs.
You can submit jobs using scientific user [ sudo su scientific ] and you can test condor using the test.jdl file [ condor_submit jobs/test.jdl ].
Good fun! :)
EOF
